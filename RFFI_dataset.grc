options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: only_CFO_database
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: SNRdB
  id: variable
  parameters:
    comment: ''
    value: '-5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 132.0]
    rotation: 0
    state: enabled
- name: bw
  id: variable
  parameters:
    comment: ''
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 36.0]
    rotation: 0
    state: enabled
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: '868000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 20.0]
    rotation: 0
    state: true
- name: clk_offset
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 132.0]
    rotation: 0
    state: enabled
- name: cr
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 20.0]
    rotation: 0
    state: enabled
- name: has_crc
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 20.0]
    rotation: 0
    state: enabled
- name: impl_head
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 4.0]
    rotation: 0
    state: enabled
- name: pay_len
  id: variable
  parameters:
    comment: ''
    value: '255'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 20.0]
    rotation: 0
    state: enabled
- name: preamble_len
  id: variable
  parameters:
    comment: ''
    value: '12'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 20.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 36.0]
    rotation: 0
    state: enabled
- name: sf
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 20.0]
    rotation: 0
    state: enabled
- name: soft_decoding
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 132.0]
    rotation: 0
    state: enabled
- name: sync_word
  id: variable
  parameters:
    comment: ''
    value: '18'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 4.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_1
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/jahnavi/BTP/final_test.bin
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 580.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 316.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\n\
      \    \"\"\"Coarse CFO Estimator (No Compensation)\"\"\"\n\n    def __init__(self,\
      \ samp_rate=250e3):\n        gr.sync_block.__init__(self,\n            name=\"\
      Coarse CFO Estimator\",\n            in_sig=[np.complex64],  # Input: Complex\
      \ IQ samples\n            out_sig=[np.float32]  # Output: CFO Estimate (only)\n\
      \        )\n        self.samp_rate = samp_rate  # Sampling rate\n\n    def work(self,\
      \ input_items, output_items):\n        r_n = input_items[0]  # Received signal\n\
      \        L = len(r_n)\n        Ts = 1 / self.samp_rate  # Sampling period\n\n\
      \        # Compute Coarse CFO\n        freqs = np.fft.fftfreq(L, Ts)\n     \
      \   delta_f_coarse = np.mean(freqs)  # Coarse CFO Estimate\n\n        output_items[0][:]\
      \ = delta_f_coarse  # CFO Estimate only (No compensation applied)\n\n      \
      \  return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '250000.0'
  states:
    _io_cache: ('Coarse CFO Estimator', 'blk', [('samp_rate', '250000.0')], [('0',
      'complex', 1)], [('0', 'float', 1)], 'Coarse CFO Estimator (No Compensation)',
      ['samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 236.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\n\
      \    \"\"\"Fine CFO Estimator (No Compensation)\"\"\"\n\n    def __init__(self,\
      \ samp_rate=250e3, preamble_length=128):\n        gr.sync_block.__init__(self,\n\
      \            name=\"Fine CFO Estimator\",\n            in_sig=[np.complex64,\
      \ np.float32],  # Inputs: Raw Signal, Coarse CFO\n            out_sig=[np.float32]\
      \  # Output: Fine CFO Estimate (only)\n        )\n        self.samp_rate = samp_rate\n\
      \        self.L = preamble_length  # Length of repeating preamble\n\n    def\
      \ work(self, input_items, output_items):\n        r_n = input_items[0]  # Received\
      \ signal\n        L = self.L\n        Ts = 1 / self.samp_rate\n\n        # Fine\
      \ CFO Estimation\n        phase_diff = np.angle(np.sum(r_n[:-L] * np.conj(r_n[L:])))\n\
      \        delta_f_fine = -phase_diff / (2 * np.pi * Ts * L)\n\n        output_items[0][:]\
      \ = delta_f_fine  # Fine CFO Estimate only (No compensation applied)\n\n   \
      \     return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble_length: '128'
    samp_rate: '250000.0'
  states:
    _io_cache: ('Fine CFO Estimator', 'blk', [('samp_rate', '250000.0'), ('preamble_length',
      '128')], [('0', 'complex', 1), ('1', 'float', 1)], [('0', 'float', 1)], 'Fine
      CFO Estimator (No Compensation)', ['samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 408.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import json\nimport os\nimport numpy as np\nimport time\nfrom gnuradio\
      \ import gr\n\nclass CFODatabaseUpdater(gr.sync_block):\n    def __init__(self,\
      \ db_path=\"cfo_database.json\", device_id=\"Device_1\"):\n        gr.sync_block.__init__(self,\
      \ name=\"CFO Database Updater\",\n                               in_sig=[np.float32,\
      \ np.float32],  # Two real-valued inputs: Coarse CFO, Fine CFO\n           \
      \                    out_sig=None)\n        self.db_path = db_path\n       \
      \ self.device_id = device_id  # Allow dynamic device ID\n        self.cfo_database\
      \ = self.load_database()\n        self.last_warning_time = 0  # Track last warning\
      \ message\n\n    def load_database(self):\n        \"\"\"Load the CFO database\
      \ or create a new one if missing/corrupted.\"\"\"\n        if not os.path.exists(self.db_path)\
      \ or os.stat(self.db_path).st_size == 0:\n            print(\"Warning: CFO database\
      \ file is missing or empty. Initializing new JSON file.\")\n            self.save_database({})\
      \  # Initialize empty database\n            return {}\n\n        try:\n    \
      \        with open(self.db_path, 'r') as f:\n                return json.load(f)\
      \  # Load existing JSON\n        except (json.JSONDecodeError, ValueError):\n\
      \            print(\"Error: Invalid JSON format. Resetting database.\")\n  \
      \          self.save_database({})  # Reset to empty JSON\n            return\
      \ {}\n\n    def save_database(self, database):\n        \"\"\"Save CFO database\
      \ to JSON file using atomic writes to prevent corruption.\"\"\"\n        try:\n\
      \            temp_path = self.db_path + \".tmp\"\n            with open(temp_path,\
      \ 'w') as f:\n                json.dump(database, f, indent=4)\n           \
      \ os.replace(temp_path, self.db_path)  # Atomic rename ensures safe write\n\
      \        except IOError as e:\n            print(f\"Error: Failed to save CFO\
      \ database! {e}\")\n\n    def update_database(self, device_id, coarse_cfo, fine_cfo):\n\
      \        \"\"\"Update the CFO database with min, max, mean, and range for each\
      \ device.\"\"\"\n        coarse_cfo = float(coarse_cfo)  # Convert np.float32\
      \ to Python float\n        fine_cfo = float(fine_cfo)      # Convert np.float32\
      \ to Python float\n\n        total_cfo = coarse_cfo + fine_cfo  # Compute total\
      \ estimated CFO\n\n        # \u2705 Skip invalid CFO values (but print warning\
      \ only every 5 sec)\n        if np.isnan(total_cfo) or total_cfo == 0.0:\n \
      \           if time.time() - self.last_warning_time > 5:\n                print(f\"\
      Warning: Invalid CFO value (coarse: {coarse_cfo}, fine: {fine_cfo}) detected.\
      \ Skipping update.\")\n                self.last_warning_time = time.time()\n\
      \            return\n\n        # \u2705 Ensure valid data structure with default\
      \ values\n        if device_id in self.cfo_database:\n            cfo_kmin,\
      \ cfo_kmax, _, _ = self.cfo_database[device_id]\n            cfo_kmin = min(cfo_kmin,\
      \ total_cfo)\n            cfo_kmax = max(cfo_kmax, total_cfo)\n        else:\n\
      \            cfo_kmin = cfo_kmax = total_cfo  # Initialize if new device\n\n\
      \        # \u2705 Compute mean CFO and range\n        cfo_k = (cfo_kmax + cfo_kmin)\
      \ / 2\n        lambda_k = (cfo_kmax - cfo_kmin) / 2\n\n        # \u2705 Store\
      \ in CFO database\n        self.cfo_database[device_id] = [\n            float(cfo_kmin),\
      \ float(cfo_kmax), float(cfo_k), float(lambda_k)\n        ]\n\n        # \u2705\
      \ Save database only if changes occurred\n        self.save_database(self.cfo_database)\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"Receives CFO\
      \ estimates and updates the database.\"\"\"\n        if len(input_items[0])\
      \ == 0 or len(input_items[1]) == 0:\n            if time.time() - self.last_warning_time\
      \ > 5:\n                print(\"Warning: No valid CFO values received. Skipping\
      \ update.\")\n                self.last_warning_time = time.time()\n       \
      \     return 0  # Skip processing if inputs are missing\n\n        coarse_cfo\
      \ = float(input_items[0][0])  # Get coarse CFO\n        fine_cfo = float(input_items[1][0])\
      \    # Get fine CFO\n\n        self.update_database(self.device_id, coarse_cfo,\
      \ fine_cfo)\n        return len(input_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    db_path: ' r"/home/jahnavi/BTP/cfo_database1.json"'
    device_id: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('CFO Database Updater', 'CFODatabaseUpdater', [('db_path', "'cfo_database.json'"),
      ('device_id', "'Device_1'")], [('0', 'float', 1), ('1', 'float', 1)], [], '',
      ['db_path', 'device_id'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 296.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\n\
      \    \"\"\"CFO Compensation Block\"\"\"\n\n    def __init__(self, samp_rate=250e3):\n\
      \        gr.sync_block.__init__(self,\n            name=\"CFO Compensation\"\
      ,\n            in_sig=[np.complex64, np.float32, np.float32],  # Inputs: Raw\
      \ Signal, Coarse CFO, Fine CFO\n            out_sig=[np.complex64]  # Output:\
      \ CFO Compensated Signal\n        )\n        self.samp_rate = samp_rate  # Sampling\
      \ rate\n\n    def work(self, input_items, output_items):\n        r_n = input_items[0]\
      \  # Received signal\n        delta_f_coarse = input_items[1][0]  # Coarse CFO\
      \ estimate\n        delta_f_fine = input_items[2][0]  # Fine CFO estimate\n\n\
      \        # Compute total estimated CFO\n        delta_f_total = delta_f_coarse\
      \ + delta_f_fine\n        Ts = 1 / self.samp_rate  # Sampling period\n     \
      \   n = np.arange(len(r_n))\n        \n        # Apply CFO Compensation\n  \
      \      correction = np.exp(-1j * 2 * np.pi * delta_f_total * n * Ts)\n     \
      \   r_compensated = r_n * correction\n        \n        output_items[0][:] =\
      \ r_compensated  # CFO Compensated Signal\n        \n        return len(output_items[0])\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('CFO Compensation', 'blk', [('samp_rate', '250000.0')], [('0', 'complex',
      1), ('1', 'float', 1), ('2', 'float', 1)], [('0', 'complex', 1)], 'CFO Compensation
      Block', ['samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 568.0]
    rotation: 0
    state: enabled
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass IQNormalization(gr.sync_block):\n\
      \    \"\"\"Block for Normalizing IQ Samples after CFO Compensation\"\"\"\n\n\
      \    def __init__(self):\n        gr.sync_block.__init__(self,\n           \
      \ name=\"IQ Normalization\",\n            in_sig=[np.complex64],  # Input: Compensated\
      \ IQ samples\n            out_sig=[np.complex64]  # Output: Normalized IQ samples\n\
      \        )\n\n    def work(self, input_items, output_items):\n        r_compensated\
      \ = input_items[0]  # CFO compensated signal\n\n        # Compute Root Mean\
      \ Square (RMS) of the compensated signal\n        xrms = np.sqrt(np.mean(np.abs(r_compensated)\
      \ ** 2))\n\n        # Normalize the signal\n        if xrms > 0:\n         \
      \   s_normalized = r_compensated / xrms\n        else:\n            s_normalized\
      \ = r_compensated  # Avoid division by zero\n\n        output_items[0][:] =\
      \ s_normalized\n\n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('IQ Normalization', 'IQNormalization', [], [('0', 'complex', 1)],
      [('0', 'complex', 1)], 'Block for Normalizing IQ Samples after CFO Compensation',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 600.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: bw
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Enabled
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 300.0]
    rotation: 0
    state: enabled

connections:
- [blocks_throttle2_0, '0', epy_block_0, '0']
- [blocks_throttle2_0, '0', epy_block_1, '0']
- [blocks_throttle2_0, '0', epy_block_3, '0']
- [epy_block_0, '0', epy_block_1, '1']
- [epy_block_0, '0', epy_block_2, '0']
- [epy_block_0, '0', epy_block_3, '1']
- [epy_block_1, '0', epy_block_2, '1']
- [epy_block_1, '0', epy_block_3, '2']
- [epy_block_3, '0', epy_block_4, '0']
- [epy_block_4, '0', blocks_file_sink_1, '0']
- [uhd_usrp_source_0, '0', blocks_throttle2_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.11.0
